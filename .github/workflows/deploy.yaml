# name: Docker Hub CI/CD
# on:
#   push:
#     branches: [ "backend" ]

# env:
#   DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
#   DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_KEY }}
#   IMAGE_NAME: taskmap_repo
#   TAG: latest

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest
    
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Login to Docker Hub
#         run: echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

#       - name: Build and push
#         run: |
#           docker build -t $DOCKERHUB_USERNAME/$IMAGE_NAME:$TAG ./backend
#           docker push $DOCKERHUB_USERNAME/$IMAGE_NAME:$TAG

#   deploy:
#     needs: build-and-push
#     runs-on: ubuntu-latest
    
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: List files in the backend directory
#         run: ls -la backend
      
#       - name: Copy docker-compose.yml via ssh
#         uses: appleboy/scp-action@master
#         with:
#           host: ${{ secrets.SERVER_IP }}
#           username: ${{ secrets.SERVER_USER }}
#           key: ${{ secrets.SSH_PRIVATE_KEY }}
#           passphrase: ${{ secrets.SSH_PASSPHRASE }}
#           source: "backend/docker-compose.prod.yaml"
#           target: "taskmap"
      
#       - name: Execute commands on remote server
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.SERVER_IP }}
#           username: ${{ secrets.SERVER_USER }}
#           key: ${{ secrets.SSH_PRIVATE_KEY }}
#           passphrase: ${{ secrets.SSH_PASSPHRASE }}
#           script: |
#             cd taskmap/backend
            
#             echo "Pulling images..."
#             sudo docker-compose --env-file .env -f docker-compose.prod.yaml pull
            
#             echo "Stopping and starting containers..."
#             sudo docker-compose --env-file .env -f docker-compose.prod.yaml down
#             sudo docker-compose --env-file .env -f docker-compose.prod.yaml up -d

#             sudo docker-compose -f docker-compose.prod.yaml exec backend poetry run alembic upgrade head

#             echo "Restarting Nginx..."
#             sudo systemctl restart nginx
            
#             sudo docker image prune -f
#             echo "Done!"

